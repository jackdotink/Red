import{_ as e,c as a,o as s,O as n}from"./chunks/framework.97fbe135.js";const u=JSON.parse('{"title":"What is a Namespace?","description":"","frontmatter":{},"headers":[],"relativePath":"guide/namespaces/what-is-namespace.md"}'),t={name:"guide/namespaces/what-is-namespace.md"},l=n(`<h1 id="what-is-a-namespace" tabindex="-1">What is a Namespace? <a class="header-anchor" href="#what-is-a-namespace" aria-label="Permalink to &quot;What is a Namespace?&quot;">​</a></h1><p>In Red, networking is done with namespaces. A namespace could be seen as a folder which controls it&#39;s event children. To create a namespace, call the <code>Server</code> or <code>Client</code> function from Red. Namespace names must be the same on the server and client for them to communicate.</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-GBTZu" id="tab-ysmenBR" checked="checked"><label for="tab-ysmenBR">Server</label><input type="radio" name="group-GBTZu" id="tab-2EcmxRl"><label for="tab-2EcmxRl">Client</label></div><div class="blocks"><div class="language-lua active"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">-- The typical variable name for a script&#39;s namespace is Net</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Net </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Server</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NamespaceName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">-- The typical variable name for a script&#39;s namespace is Net</span></span>
<span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Net </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Client</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NamespaceName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Calling <code>Server</code> on the client, or <code>Client</code> on the server will throw an error.</p></div><p>It&#39;s important to know that namespaces are global. You can get a namespace multiple times, and it will return the same object. This enables you to use the same namespace from multiple scripts.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Do not dynamically create namespaces. Namespace objects are never GC&#39;d, dynamically creating namespaces is a <strong>memory leak</strong>.</p></div><h2 id="namespaces-events" tabindex="-1">Namespaces &amp; Events <a class="header-anchor" href="#namespaces-events" aria-label="Permalink to &quot;Namespaces &amp; Events&quot;">​</a></h2><p>Events are not their own object, they can only be interacted with through namespaces. As an example, let&#39;s fire an event to the server from the client. You&#39;ll learn more about firing events in the <a href="./sending-invoking-events.html">Sending and Invoking Events</a> section.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">local</span><span style="color:#A6ACCD;"> Net </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Red.</span><span style="color:#82AAFF;">Client</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">NamespaceName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">-- We first pass the event name, then the data to fire with</span></span>
<span class="line"><span style="color:#FFCB6B;">Net</span><span style="color:#A6ACCD;">:</span><span style="color:#82AAFF;">Fire</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">EventName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello, world!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>As you can see the only representation of the event is it&#39;s name. Events can be signal-like or function-like (or both, although this is a bad practice). Signal-like events are events that are fired and listened to, and function-like events are events that are invoked and return a value. You&#39;ll learn more about this in the following sections.</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>Do not dynamically create events. Event names are never GC&#39;d, dynamically creating events is a <strong>memory leak</strong>.</p></div>`,11),o=[l];function c(p,r,i,m,d,h){return s(),a("div",null,o)}const D=e(t,[["render",c]]);export{u as __pageData,D as default};
