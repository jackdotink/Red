import{_ as s,c as e,o as n,O as a}from"./chunks/framework.e854fd36.js";const d=JSON.parse('{"title":"Event Data Structure","description":"","frontmatter":{},"headers":[],"relativePath":"guide/hacking-red/event-data-structure.md"}'),l={name:"guide/hacking-red/event-data-structure.md"},t=a(`<h1 id="event-data-structure" tabindex="-1">Event Data Structure <a class="header-anchor" href="#event-data-structure" aria-label="Permalink to &quot;Event Data Structure&quot;">​</a></h1><p>This section will go over the structure Red uses to pack events into a single call. Let&#39;s start off with the full structure, then break it down. You can learn about identifiers <a href="./identifiers.html">here</a>.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> Identifier </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> SingleFire </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: any | { any },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> MultipleFire </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: { any | { any } },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> CallId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> ServerIncomingCall </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: {</span></span>
<span class="line"><span style="color:#A6ACCD;">		{ CallId, </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">any },</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> ClientIncomingCall </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	{ CallId, boolean, </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">any },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> EventData </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">	SingleFire,</span></span>
<span class="line"><span style="color:#A6ACCD;">	MultipleFire,</span></span>
<span class="line"><span style="color:#A6ACCD;">	ServerIncomingCall | ClientIncomingCall</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>As you can see, it&#39;s not all too complex, but there is a lot there. Let&#39;s break it down.</p><h2 id="single-fire-events" tabindex="-1">Single Fire Events <a class="header-anchor" href="#single-fire-events" aria-label="Permalink to &quot;Single Fire Events&quot;">​</a></h2><p>These are events that are fired once in the frame. We can save 2 bytes per call by seperating these from the multifire events.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> SingleFire </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: any | { any },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>For now, ignore the <code>any</code> part of the <code>any | { any }</code>. We&#39;ll cover that in <a href="#single-argument-compression">Single Argument Compression</a>. As you can see, we take a dictionary of event identifiers, and map it to a list of arguments that the event is called with. However this only works for singular events, so that takes us to the next section.</p><h2 id="multiple-fire-events" tabindex="-1">Multiple Fire Events <a class="header-anchor" href="#multiple-fire-events" aria-label="Permalink to &quot;Multiple Fire Events&quot;">​</a></h2><p>These are events that are fired multiple times in the frame.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> MultipleFire </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: { any | { any } },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>At the core of it, these are the same as single fire events, but they&#39;re wrapped in a table so that we can have multiple calls to the same event in the same frame.</p><h2 id="function-like-calls" tabindex="-1">Function-Like Calls <a class="header-anchor" href="#function-like-calls" aria-label="Permalink to &quot;Function-Like Calls&quot;">​</a></h2><p>These are events that are called like functions. They are called with any number of arguments, and can return any number of arguments.</p><div class="language-lua"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> CallId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> ServerIncomingCall </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	[Identifier]: {</span></span>
<span class="line"><span style="color:#A6ACCD;">		{ CallId, </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">any },</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">type</span><span style="color:#A6ACCD;"> ClientIncomingCall </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> {</span></span>
<span class="line"><span style="color:#A6ACCD;">	{ CallId, boolean, </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">any },</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>These are look somewhat complex, but once you figure it out it&#39;s actually quite simple. We&#39;ll start on the client, go to the server, and back to the client.</p><ol><li><p>On the client we have some arguments, and we want to call a function on the server, and importantly, get the returned values. We create a unique <code>CallId</code> to assign to this specific call, and then we send the <code>CallId</code> and the arguments to the server (packed in the same way as <a href="#multiple-fire-events">Multiple Fire Events</a>).</p></li><li><p>The server recieves this call, and then runs the function in a protected call (<code>pcall</code>). It then sends the <code>CallId</code> and the returned values (including the <code>pcall</code> success value) back to the client.</p></li><li><p>The client maps the <code>CallId</code> to the returned promise, and resolves or rejects the promise with the returned values, based on the success value.</p></li></ol><h2 id="single-argument-compression" tabindex="-1">Single Argument Compression <a class="header-anchor" href="#single-argument-compression" aria-label="Permalink to &quot;Single Argument Compression&quot;">​</a></h2><p>Single argument compression saves 2 bytes per call, and it&#39;s quite simple. <strong>If an event is fired with a single argument, there is no need to wrap it in a table</strong> (unless that single argument is a table). In Red this is done for Single Fire and Multiple Fire events, but not function-like calls.</p>`,19),p=[t];function o(r,i,c,C,A,y){return n(),e("div",null,p)}const h=s(l,[["render",o]]);export{d as __pageData,h as default};
